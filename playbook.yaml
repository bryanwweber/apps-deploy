- name: System Setup
  hosts: myhosts
  become: true
  tags: setup
  tasks:
    - name: Update all system packages
      ansible.builtin.apt:
        autoremove: true
        upgrade: true
        update_cache: true

    - name: Install aptitude # noqa package-latest
      ansible.builtin.apt:
        name: aptitude
        state: latest
        update_cache: true

    - name: Install required system packages # noqa package-latest
      ansible.builtin.apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - python3-pip
          - virtualenv
          - python3-setuptools
        state: latest
        update_cache: true

    - name: Add Docker GPG apt Key
      ansible.builtin.apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker Repository
      ansible.builtin.apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu noble stable
        state: present

    - name: Update apt and install docker-ce # noqa package-latest
      ansible.builtin.apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: latest
        update_cache: true

## https://help.ubuntu.com/community/AutomaticSecurityUpdates
- name: Configure automated updates (Ubuntu)
  hosts: myhosts
  tags: setup
  become: true
  gather_facts: false
  tasks:
    - name: Install apt prerequisites for automated reboots
      ansible.builtin.apt:
        name: update-notifier-common
        state: present

    - name: Create unattended upgrades configuration file
      ansible.builtin.blockinfile:
        dest: /etc/apt/apt.conf.d/20auto-upgrades
        block: |
          APT::Periodic::Update-Package-Lists "1";
          APT::Periodic::Unattended-Upgrade "1";
        marker: "// {mark} ANSIBLE MANAGED BLOCK - unattended_upgrades settings"
        create: true
        mode: "0644"
        owner: root
        group: root
      register: unattended_upgrades_config_set

    - name: Enable automated reboots
      ansible.builtin.blockinfile:
        dest: /etc/apt/apt.conf.d/50unattended-upgrades
        block: |
          Unattended-Upgrade::Automatic-Reboot "true";
          Unattended-Upgrade::Automatic-Reboot-Time "04:00";
        marker: "// {mark} ANSIBLE MANAGED BLOCK - unattended_upgrades settings"
        create: true
        mode: "0644"
        owner: root
        group: root
      register: unattended_upgrades_settings_set

    - name: Dpkg reconfigure # noqa no-changed-when
      ansible.builtin.command:
        cmd: dpkg-reconfigure -f noninteractive unattended-upgrades
      register: dpkg_reconfigure_unattended_upgrades
      when:
        - unattended_upgrades_config_set.changed or
          unattended_upgrades_settings_set.changed

    - name: Configure updates installation timing
      ansible.builtin.lineinfile:
        path: /lib/systemd/system/apt-daily-upgrade.timer
        regexp: "^OnCalendar"
        line: OnCalendar=*-*-* 03:30

    - name: Configure updates installation timing offset
      ansible.builtin.lineinfile:
        path: "/lib/systemd/system/apt-daily-upgrade.timer"
        regexp: "^RandomizedDelaySec"
        line: "RandomizedDelaySec=15m"

- name: Install Karakeep via Docker compose
  hosts: myhosts
  tags: karakeep
  tasks:
    - name: Create the config directory
      ansible.builtin.file:
        path: "/karakeep/"
        state: directory
        mode: "0755"

    - name: Copy the docker configuration
      ansible.builtin.copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        mode: "0644"
      loop:
        - src: docker-compose.yml
          dest: "/karakeep/"
        - src: karakeep.env
          dest: "/karakeep/.env"

    - name: Boot the compose
      become: true
      community.docker.docker_compose_v2:
        project_src: /karakeep/
        pull: always
        state: present

- name: Install caddy
  hosts: myhosts
  become: true
  tags: caddy

  pre_tasks:
    - name: Create the config directory
      ansible.builtin.file:
        path: "/caddy/"
        state: directory
        mode: "0755"
    - name: Copy the configuration
      ansible.builtin.copy:
        src: "caddy.env"
        dest: "/caddy/.env"
        mode: "0644"

  roles:
    - role: caddy_ansible.caddy_ansible
      caddy_update: true
      caddy_config_update: true
      caddy_packages:
        - "github.com/caddy-dns/namecheap"
      caddy_environment_files:
        - "/caddy/.env"
      caddy_systemd_capabilities_enabled: true
      caddy_systemd_network_dependency: false
      caddy_config: |
        {
        	log {
        		output file /var/log/caddy/access.log
        	}
        	email bryan@bryanwweber.com
        }

        (ts_host) {
        	bind {env.TAILNET_IP}

        	@blocked not remote_ip 100.64.0.0/10

        	tls {
          		resolvers 1.1.1.1
          		dns namecheap {
          			api_key {env.NAMECHEAP_API_KEY}
          			user {env.NAMECHEAP_API_USER}
          			# api_endpoint https://api.sandbox.namecheap.com/xml.response
          			api_endpoint https://api.namecheap.com/xml.response
          			client_ip {env.PUBLIC_CLIENT_IP}
          		}
        	}

        	respond @blocked "Unauthorized" 403
        }

        hoarder.bryanwweber.com {
        	import ts_host
        	reverse_proxy localhost:3000
        }

        karakeep.bryanwweber.com {
        	import ts_host
        	reverse_proxy localhost:3000
        }
